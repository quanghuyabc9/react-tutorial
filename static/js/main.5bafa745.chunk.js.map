{"version":3,"sources":["index.js"],"names":["Square","props","isHighlight","style","color","className","onClick","value","Board","i","this","winner","line","squares","numbers","boardRowItems","squareItems","j","push","renderSquare","React","Component","Game","state","history","Array","fill","col","row","move","stepNumber","xIsNext","sortType","slice","length","calculateWinner","setState","concat","Math","floor","step","current","historySorted","sort","a","b","reverse","status","moves","map","desc","key","jumpTo","square","checkDraw","handleClick","class","type","sortMove","lines","c","ReactDOM","render","document","getElementById"],"mappings":"sOAIA,SAASA,EAAOC,GACd,OAAIA,EAAMC,YAEN,4BAAQC,MAAO,CAAEC,MAAO,OAASC,UAAU,SAASC,QAASL,EAAMK,SAChEL,EAAMM,OAKT,4BAAQF,UAAU,SAASC,QAASL,EAAMK,SACvCL,EAAMM,O,IAKTC,E,2KACSC,GAAI,IAAD,OACVP,GAAc,EAIlB,OAHIQ,KAAKT,MAAMU,SACTF,IAAMC,KAAKT,MAAMU,OAAOC,KAAK,IAAMH,IAAMC,KAAKT,MAAMU,OAAOC,KAAK,IAAMH,IAAMC,KAAKT,MAAMU,OAAOC,KAAK,KACrGV,GAAc,IACX,kBAACF,EAAD,CACLO,MAAOG,KAAKT,MAAMY,QAAQJ,GAC1BH,QAAS,kBAAM,EAAKL,MAAMK,QAAQG,IAClCP,YAAaA,M,+BAMf,IAFA,IAAMY,EAAU,CAAC,EAAG,EAAG,GACnBC,EAAgB,GACpB,MAAgBD,EAAhB,eAAyB,CAApB,IAAoB,EAAdL,EAAC,KACNO,EAAc,GADK,cAEPF,GAFO,IAEvB,2BAAyB,CAAC,IAAfG,EAAc,QACvBD,EAAYE,KAAKR,KAAKS,aAAa,EAAIV,EAAIQ,KAHtB,8BAKvBF,EAAcG,KACZ,yBAAKb,UAAU,aACZW,IAGP,OACE,6BACGD,O,GA3BWK,IAAMC,WAiCpBC,E,kDACJ,WAAYrB,GAAQ,IAAD,8BACjB,cAAMA,IACDsB,MAAQ,CACXC,QAAS,CAAC,CACRX,QAASY,MAAM,GAAGC,KAAK,MACvBC,IAAK,KACLC,IAAK,KACLC,KAAM,IAERC,WAAY,EACZC,SAAS,EACTC,SAAU,GAXK,E,wDAePvB,GACV,IAAMe,EAAUd,KAAKa,MAAMC,QAAQS,MAAM,EAAGvB,KAAKa,MAAMO,WAAa,GAE9DjB,EADUW,EAAQA,EAAQU,OAAS,GACjBrB,QAAQoB,QAC5BE,EAAgBtB,IAAYA,EAAQJ,KAGxCI,EAAQJ,GAAKC,KAAKa,MAAMQ,QAAU,IAAM,IACxCrB,KAAK0B,SAAS,CACZZ,QAASA,EAAQa,OAAO,CAAC,CACvBxB,QAASA,EACTc,IAAKW,KAAKC,MAAM9B,EAAI,GACpBmB,IAAKU,KAAKC,MAAM9B,EAAI,GACpBoB,KAAML,EAAQU,UAEhBJ,WAAYN,EAAQU,OACpBH,SAAUrB,KAAKa,MAAMQ,QACrBC,SAAUtB,KAAKa,MAAMS,WAEnBG,EAAgBtB,IAClBH,KAAK0B,SAAS,O,6BAMXI,GACL9B,KAAK0B,SAAS,CACZN,WAAYU,EACZT,QAAUS,EAAO,IAAO,M,+BAIlB,IAAD,OACDhB,EAAUd,KAAKa,MAAMC,QACrBiB,EAAUjB,EAAQd,KAAKa,MAAMO,YAE/BY,EAAgBlB,EAAQS,QAEA,IAAxBvB,KAAKa,MAAMS,SACbU,EAAcC,MAAK,SAAUC,EAAGC,GAC9B,OAAID,EAAEf,KAAOgB,EAAEhB,MAAc,EACpBe,EAAEf,KAAOgB,EAAEhB,KAAa,EACrB,MAGda,EAAcC,MAAK,SAAUC,EAAGC,GAC9B,OAAID,EAAEf,KAAOgB,EAAEhB,MAAc,EACpBe,EAAEf,KAAOgB,EAAEhB,KAAa,EACrB,KAEda,EAAcI,WAEhB,IAqBIC,EArBEC,EAAQN,EAAcO,KAAI,SAACT,EAAMX,GACrC,IAAMqB,EAAOV,EAAKX,KAAL,sBACIW,EAAKX,KADT,iBACsBW,EAAKb,IAD3B,iBACuCa,EAAKZ,IAD5C,KAEX,mBACF,OAAIY,EAAKX,OAAS,EAAKN,MAAMO,WAEzB,wBAAIqB,IAAKX,EAAKX,MACZ,4BAAQvB,QAAS,kBAAM,EAAK8C,OAAOZ,EAAKX,QAAO,2BAAIqB,KAMrD,wBAAIC,IAAKX,EAAKX,MACZ,4BAAQvB,QAAS,kBAAM,EAAK8C,OAAOZ,EAAKX,QAAQqB,OAMlDvC,EAASwB,EAAgBM,EAAQ5B,SAWvC,OAREkC,EADEpC,EACO,WAAaA,EAAO0C,OA2EnC,SAAmBxC,GACjB,IAAK,IAAIJ,EAAI,EAAGA,EAAII,EAAQqB,OAAQzB,IAClC,GAAkB,MAAdI,EAAQJ,GACV,OAAO,EAEX,OAAO,EA9EC6C,CAAUb,EAAQ5B,SACX,mBAGA,iBAAmBH,KAAKa,MAAMQ,QAAU,IAAM,KAGzD,yBAAK1B,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACG,EAAD,CACEK,QAAS4B,EAAQ5B,QACjBP,QAAS,SAACG,GAAD,OAAO,EAAK8C,YAAY9C,IACjCE,OAAQA,KAGZ,yBAAKN,UAAU,aACb,6BAAM0C,GACN,2DACA,6BACE,2BAAOS,MAAM,UACX,2BAAOC,KAAK,WAAWnD,QAAS,kBAAM,EAAKoD,cAC3C,0BAAMF,MAAM,mBAGhB,4BAAKR,O,iCAQXtC,KAAK0B,SAAS,CACZZ,QAASd,KAAKa,MAAMC,QACpBM,WAAYpB,KAAKa,MAAMO,WACvBC,QAASrB,KAAKa,MAAMQ,QACpBC,SAAU,EAAItB,KAAKa,MAAMS,e,GAlIZZ,IAAMC,WA8IzB,SAASc,EAAgBtB,GAWvB,IAVA,IAAM8C,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAlD,EAAI,EAAGA,EAAIkD,EAAMzB,OAAQzB,IAAK,CAAC,IAAD,cACnBkD,EAAMlD,GADa,GAC9BmC,EAD8B,KAC3BC,EAD2B,KACxBe,EADwB,KAErC,GAAI/C,EAAQ+B,IAAM/B,EAAQ+B,KAAO/B,EAAQgC,IAAMhC,EAAQ+B,KAAO/B,EAAQ+C,GAKpE,MAJe,CACbP,OAAQxC,EAAQ+B,GAChBhC,KAAM,CAACgC,EAAGC,EAAGe,IAMnB,OAAO,KA3BTC,IAASC,OACP,kBAACxC,EAAD,MACAyC,SAASC,eAAe,U","file":"static/js/main.5bafa745.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  if (props.isHighlight)\n    return (\n      <button style={{ color: 'red' }} className=\"square\" onClick={props.onClick}>\n        {props.value}\n      </button>\n    );\n  else\n    return (\n      <button className=\"square\" onClick={props.onClick}>\n        {props.value}\n      </button>\n    );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    let isHighlight = false;\n    if (this.props.winner)\n      if (i === this.props.winner.line[0] || i === this.props.winner.line[1] || i === this.props.winner.line[2])\n        isHighlight = true;\n    return <Square\n      value={this.props.squares[i]}\n      onClick={() => this.props.onClick(i)}\n      isHighlight={isHighlight} />;\n  }\n\n  render() {\n    const numbers = [0, 1, 2];\n    let boardRowItems = [];\n    for (const i of numbers) {\n      let squareItems = [];\n      for (const j of numbers) {\n        squareItems.push(this.renderSquare(3 * i + j));\n      }\n      boardRowItems.push(\n        <div className=\"board-row\">\n          {squareItems}\n        </div>)\n    }\n    return (\n      <div>\n        {boardRowItems}\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n        col: null,\n        row: null,\n        move: 0,\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      sortType: 1, // 1: asc, 0: desc\n    }\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        col: Math.floor(i % 3),\n        row: Math.floor(i / 3),\n        move: history.length,\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n      sortType: this.state.sortType,\n    });\n    if (calculateWinner(squares)) {\n      this.setState({\n\n      })\n    }\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n\n    let historySorted = history.slice();\n\n    if (this.state.sortType === 1) {\n      historySorted.sort(function (a, b) {\n        if (a.move < b.move) return -1;\n        else if (a.move > b.move) return 1;\n        else return 0;\n      });\n    } else {\n      historySorted.sort(function (a, b) {\n        if (a.move < b.move) return -1;\n        else if (a.move > b.move) return 1;\n        else return 0;\n      });\n      historySorted.reverse();\n    }\n    const moves = historySorted.map((step, move) => {\n      const desc = step.move ?\n        `Go to move #${step.move} (col:${step.col}, row:${step.row})` :\n        'Go to game start';\n      if (step.move === this.state.stepNumber) {\n        return (\n          <li key={step.move}>\n            <button onClick={() => this.jumpTo(step.move)}><b>{desc}</b></button>\n          </li>\n        )\n      }\n      else {\n        return (\n          <li key={step.move}>\n            <button onClick={() => this.jumpTo(step.move)}>{desc}</button>\n          </li>\n        )\n      }\n\n    });\n    const winner = calculateWinner(current.squares);\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner.square;\n    } else {\n      if (checkDraw(current.squares)) {\n        status = \"No winner! Draw!\";\n      }\n      else\n        status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n            winner={winner}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <div>Toggle button for sorting:</div>\n          <div>\n            <label class=\"switch\">\n              <input type=\"checkbox\" onClick={() => this.sortMove()} />\n              <span class=\"slider round\"></span>\n            </label>\n          </div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n\n\n  sortMove() {\n    this.setState({\n      history: this.state.history,\n      stepNumber: this.state.stepNumber,\n      xIsNext: this.state.xIsNext,\n      sortType: 1 - this.state.sortType,\n    });\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      const winner = {\n        square: squares[a],\n        line: [a, b, c]\n      };\n      return winner;\n      // return squares[a];\n    }\n  }\n  return null;\n}\n\nfunction checkDraw(squares) {\n  for (let i = 0; i < squares.length; i++) {\n    if (squares[i] == null)\n      return false;\n  }\n  return true;\n}"],"sourceRoot":""}