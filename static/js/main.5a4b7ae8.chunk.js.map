{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","MarkedSquare","style","color","Board","renderSquare","i","winner","squareIndex","line","length","isMarked","squares","iddd","boardRowItems","gameConfig","nRow","squareItems","j","nCol","push","Game","useState","nWinCondition","setGameConfig","Array","fill","position","col","row","stepNumber","isDraw","isWin","latestSquareIndex","history","setHistory","setStepNumber","xIsNext","setXIsNext","isAsc","setIsAsc","renderedHistory","slice","sort","a","b","status","moves","map","step","move","description","BoldMoveItem","MoveItem","jumpTo","current","calculateWinner","square","historyHandle","checkDraw","concat","Math","floor","handleClickOnSquare","class","type","GameConfigForm","handleInputChange","target","name","parseInt","event","onChange","key","di","dj","k","log","tmpI","tmpJ","tmpSquareIndex","count1","count2","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5a4b7ae8.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst nRowDefault = 3;\nconst nColDefault = 3;\nconst nWinConditionDefault = 3;\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nfunction MarkedSquare(props) {\n  return (\n    <button style={{ color: 'red' }} className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  )\n}\n\nfunction Board(props) {\n  const renderSquare = (i) => {\n    if (props.winner && isMarked(i, props.winner)) {\n      return <MarkedSquare value={props.squares[i]} onClick={() => props.onClick(i)} iddd={i} />\n    }\n    else\n      return <Square value={props.squares[i]} onClick={() => props.onClick(i)} iddd={i} />\n  }\n  let boardRowItems = [];\n  for (let i = 0; i < props.gameConfig.nRow; i++) {\n    let squareItems = [];\n    for (let j = 0; j < props.gameConfig.nCol; j++) {\n      squareItems.push(renderSquare(props.gameConfig.nCol * i + j));\n    }\n    boardRowItems.push(\n      <div className=\"board-row\">\n        {squareItems}\n      </div>\n    );\n  }\n  return (\n    <div>\n      {boardRowItems}\n    </div>\n  );\n}\n\n\nfunction Game() {\n  const [gameConfig, setGameConfig] = useState({\n    nRow: nRowDefault,\n    nCol: nColDefault,\n    nWinCondition: nWinConditionDefault\n  });\n\n  const [history, setHistory] = useState([{\n    squares: Array(gameConfig.nRow * gameConfig.nCol).fill(null),\n    position: { col: -1, row: -1 },\n    stepNumber: 0,\n    isDraw: false,\n    isWin: false,\n    latestSquareIndex: -1\n  }]);\n\n  const [stepNumber, setStepNumber] = useState(0);\n\n  const [xIsNext, setXIsNext] = useState(true);\n\n  const [isAsc, setIsAsc] = useState(true);\n\n  const handleClickOnSquare = (i) => {\n    const historyHandle = history.slice(0, stepNumber + 1);\n    const current = historyHandle[historyHandle.length - 1];\n    const squares = current.squares.slice();\n    if (current.isWin || squares[i]) {\n      return;\n    }\n    squares[i] = xIsNext ? 'X' : 'O';\n    let isWin = false;\n    let isDraw = false;\n    if (calculateWinner(squares, i, gameConfig)) {\n      isWin = true;\n    } else if (checkDraw(squares)) {\n      isDraw = true;\n    }\n    setStepNumber(historyHandle.length);\n    setHistory(historyHandle.concat([{\n      squares: squares,\n      position: {\n        col: Math.floor(i % gameConfig.nCol) + 1,\n        row: Math.floor(i / gameConfig.nCol) + 1\n      },\n      stepNumber: historyHandle.length,\n      isWin: isWin,\n      isDraw: isDraw,\n      latestSquareIndex: i\n    }]));\n    setXIsNext(!xIsNext);\n  };\n\n  const handleClickOnSwitchBtn = () => {\n    setIsAsc(!isAsc);\n  };\n\n  const asc = (a, b) => {\n    return a.stepNumber - b.stepNumber;\n  }\n  const desc = (a, b) => {\n    return b.stepNumber - a.stepNumber;\n  }\n  let renderedHistory = history.slice(0, history.length);\n  if (isAsc) {\n    renderedHistory.sort(asc);\n  }\n  else {\n    renderedHistory.sort(desc);\n  }\n\n  const jumpTo = (step) => {\n    setStepNumber(step);\n    setXIsNext((step % 2) === 0);\n  };\n\n  const handleInputChange = (target) => {\n    if (target.name === \"nCol\") {\n      setGameConfig({\n        nRow: gameConfig.nRow,\n        nCol: parseInt(target.value),\n        nWinCondition: gameConfig.nWinCondition\n      });\n    } else if (target.name === \"nRow\") {\n      setGameConfig({\n        nRow: parseInt(target.value),\n        nCol: gameConfig.nCol,\n        nWinCondition: gameConfig.nWinCondition\n      });\n    } else if (target.name === \"nWinCondition\") {\n      setGameConfig({\n        nRow: gameConfig.nRow,\n        nCol: gameConfig.nCol,\n        nWinCondition: parseInt(target.value)\n      });\n    }\n    setHistory([{\n      squares: Array(gameConfig.nRow * gameConfig.nCol).fill(null),\n      position: { col: -1, row: -1 },\n      stepNumber: 0,\n      isDraw: false,\n      isWin: false,\n      latestSquareIndex: -1\n    }]\n    );\n    setStepNumber(0);\n    setXIsNext(true);\n    setIsAsc(true);\n  };\n\n  const moves = renderedHistory.map((step, move) => {\n    const description = step.stepNumber ?\n      `Go to move #${step.stepNumber} (col: ${step.position.col}), row: ${step.position.row})` :\n      'Go to game start';\n\n    if (step.stepNumber === stepNumber) {\n      return <BoldMoveItem i={step.stepNumber} description={description} />\n    }\n    else {\n      return <MoveItem i={step.stepNumber} description={description} onClick={() => jumpTo(step.stepNumber)} />\n    }\n  });\n  let status;\n  const current = history[stepNumber];\n  const winner = calculateWinner(current.squares, current.latestSquareIndex, gameConfig);\n  if (current.isWin) {\n    status = 'Winner: ' + winner.square;\n  } else if (current.isDraw)\n    status = 'Draw !';\n  else\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board\n          squares={current.squares}\n          onClick={(i) => handleClickOnSquare(i)}\n          winner={winner}\n          gameConfig={gameConfig}\n        />\n      </div>\n      <div className=\"game-info\">\n        <div>{status}</div>\n        <ol>{moves}</ol>\n      </div>\n      <div className=\"game-info\">\n        <div>\n          <label class=\"switch\">\n            <input type=\"checkbox\" onClick={() => handleClickOnSwitchBtn()} />\n            <span class=\"slider round\"></span>\n          </label>\n        </div>\n      </div>\n      <div className=\"game-info\">\n        <GameConfigForm gameConfig={gameConfig} handleInputChange={handleInputChange} />\n      </div>\n    </div>\n  );\n}\n\nfunction GameConfigForm(props) {\n  const handleInputChange = (event) => {\n    const target = event.target;\n    props.handleInputChange(target);\n  }\n  return (\n    <form>\n      <legend>Number of rows:</legend>\n      <input\n        name=\"nRow\"\n        type=\"number\"\n        value={props.gameConfig.nRow}\n        onChange={handleInputChange} />\n      <br />\n      <br />\n      <legend>Number of rows:</legend>\n      <input\n        name=\"nCol\"\n        type=\"number\"\n        value={props.gameConfig.nCol}\n        onChange={handleInputChange} />\n      <br />\n      <br />\n      <legend>Length to win:</legend>\n      <input\n        name=\"nWinCondition\"\n        type=\"number\"\n        value={props.gameConfig.nWinCondition}\n        onChange={handleInputChange} />\n    </form>\n  );\n}\n\nfunction MoveItem(props) {\n  return (\n    <li key={props.i}>\n      <button onClick={() => props.onClick()}>{props.description}</button>\n    </li>\n  )\n}\n\nfunction BoldMoveItem(props) {\n  return (\n    <li key={props.i}>\n      <button><b>{props.description}</b></button>\n    </li>\n  )\n}\n\nfunction calculateWinner(squares, latestSquareIndex, gameConfig) {\n  const di = [0, 0, 1, -1, -1, 1, -1, 1];\n  const dj = [1, -1, 0, 0, -1, 1, 1, -1];\n\n  let i = Math.floor(latestSquareIndex / gameConfig.nCol);\n  let j = latestSquareIndex % gameConfig.nCol;\n\n  for (let k = 0; k < di.length; k += 2) {\n    let log = [];\n    let tmpI = i, tmpJ = j;\n    let tmpSquareIndex = tmpI * gameConfig.nCol + tmpJ;\n    let count1 = 0;\n    while (tmpI >= 0 && tmpI <= gameConfig.nRow - 1 && tmpJ >= 0 && tmpJ <= gameConfig.nCol - 1 && squares[tmpSquareIndex] === squares[latestSquareIndex]) {\n      log.push(tmpSquareIndex);\n      count1++;\n      tmpI = tmpI + di[k];\n      tmpJ = tmpJ + dj[k];\n      tmpSquareIndex = tmpI * gameConfig.nCol + tmpJ;\n    }\n    tmpI = i;\n    tmpJ = j;\n    tmpSquareIndex = tmpI * gameConfig.nCol + tmpJ;\n    let count2 = 0;\n    while (tmpI >= 0 && tmpI <= gameConfig.nRow - 1 && tmpJ >= 0 && tmpJ <= gameConfig.nCol - 1 && squares[tmpSquareIndex] === squares[latestSquareIndex]) {\n      log.push(tmpSquareIndex);\n      count2++;\n      tmpI = tmpI + di[k + 1];\n      tmpJ = tmpJ + dj[k + 1];\n      tmpSquareIndex = tmpI * gameConfig.nCol + tmpJ;\n    }\n    if (count1 + count2 - 1 === gameConfig.nWinCondition) {\n      const winner = {\n        square: squares[latestSquareIndex],\n        line: log\n      }\n      return winner;\n    }\n  }\n  return null;\n}\n\nfunction checkDraw(squares) {\n  for (let i = 0; i < squares.length; i++) {\n    if (squares[i] == null)\n      return false;\n  }\n  return true;\n}\n\nfunction isMarked(squareIndex, winner) {\n  for (let i = 0; i < winner.line.length; i++) {\n    if (squareIndex === winner.line[i])\n      return true;\n  }\n  return false;\n}\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);"],"sourceRoot":""}